#!/usr/bin/env ruby
# frozen_string_literal: true

require "macho"
require "optparse"
require "json"

def macho_info(macho)
  puts "FILE INFORMATION:"
  puts "\tHeader type: #{macho.header.class}"
  puts "\tMagic: #{macho.magic_string}"
  puts "\tFiletype: #{macho.filetype}"
  puts "\tCPU type: #{macho.cputype}"
  puts "\tCPU subtype: #{macho.cpusubtype}"
  puts "\tNo. load commands: #{macho.ncmds}"
  puts "\tSize of load commands: #{macho.sizeofcmds}"
  puts "\tFlags: #{macho.flags}"
  puts "\tAlignment: #{macho.alignment}"

  puts "\nLOAD COMMANDS:"
  macho.load_commands.each do |lc|
    puts "\t#{lc} (#{lc.class}) (offset: #{lc.offset}, size: #{lc.cmdsize})"
  end

  puts "\nDYLIB ID: #{macho.dylib_id}" if macho.dylib?

  puts "\nDYNAMIC LIBRARIES:"
  macho.dylib_load_commands.each do |lc|
    puts "\t#{lc.name} (#{lc.type})"
  end

  puts "\nSEGMENTS AND SECTIONS:"

  macho.segments.each do |seg|
    puts "\tSegment: #{seg.segname} " \
         "(offset: #{seg.fileoff}, size: #{seg.filesize})"

    seg.sections.each do |sect|
      puts "\t\tSection: #{sect.section_name} " \
           "(offset: #{sect.offset}, size: #{sect.size})"
    end
  end
end

options = {}
OptionParser.new do |parser|
  parser.banner = <<~BANNER
    Dump metadata and information in the given Mach-O binary.

    Usage:
      macho-info [options] <file>
  BANNER

  parser.on "-f", "--first-only", "dump only the first slice of a universal binary" do |f|
    options[:first_only] = f
  end

  parser.on "-j", "--json", "dump a JSON representation of the entire binary" do |j|
    options[:json] = j
  end
end.parse!

filename = ARGV.shift || abort("I need a file to dump.")

macho_file = MachO.open(filename)

if options[:json]
  puts macho_file.to_h.to_json
else
  macho_slices = if macho_file.is_a?(MachO::FatFile)
                   macho_file.machos
                 else
                   [macho_file]
                 end

  if options[:first_only]
    macho_info(macho_slices.first)
  else
    macho_slices.each do |macho|
      macho_info(macho)
    end
  end
end
